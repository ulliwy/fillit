#include "fillit.h"

// int		adjacent(int *squares)
// {
// 	int i;
//
// 	i = 0;
//
// 	while (i < 4)
// 	{
// 		has_adjacent = false;
// 		if ()
// 	}
//
// }

int		connected(int *squares)
{
	int i;
	int j;
	int dx;
	int dy;

	i = 0;
	while (i < 3)
	{
		j = i + 1;
		while (j < 4)
		{
			dx = squares[j] - squares[i];
			dy = squares[j] - squares[i];
			dx = dx < 0 ? dx * -1 : dx;
			dy = dy < 0 ? dy * -1 : dy;
			if (dx + dy > 3)// && !adjacent(squares))
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

t_tet	*new_tet(char *str)
{
	t_tet	*out;
	int i;
	int j;
	int x;
	int y;

	i = 0;
	x = 0;
	y = 0;
	while (i < 20)
	{
		if (!y && str[i] == '#')
			y = i / 5;
		if (str[i] == '#' && str[i] % 5 < x)
			x = i % 5;
		i++;
	}
	i = 0;
	while (str[i] != '\n')
		
}

t_tet	*create_tet(char *str)
{
	int i;
	int squares[4];
	int count;

	i = 0;
	count = 0;
	while (i < 20)
	{
		if (i + 1 % 5 == 0 && str[i] != '\n')
			return (NULL);
		if (i + 1 % 5 != 0 && str[i] == '\n')
			return (NULL);
		if (str[i] != '.' && str[i] != '#' && str[i] != '\n')
			return (NULL);
		if (str[i] == '#')
		{
			if (count == 4)
				return (NULL);
			squares[count++] = i;
		}
		i++;
	}
	if (count < 4 || !connected(squares))
		return (NULL);
	return (new_tet(str));
}
